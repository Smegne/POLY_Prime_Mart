<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Prime Mart - Home</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/styles.css">
  <style>
    /* Ensure product card images cover the entire allocated area */
    .product-card-container {
      position: relative;
      width: 100%;
      padding-top: 60%; /* 1:1 aspect ratio for square images */
      overflow: hidden;
    }

    .product-card-container img {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover; /* Cover the entire area */
      object-position: center;
    }

    /* Grid layout for featured products: 3 columns per row */
    #product-list {
      display: grid;
      grid-template-columns: repeat(3, 1fr); /* 3 columns */
      gap: 2rem; /* Increased spacing between cards */
    }

    /* Ensure product cards are prominent */
    .product-card {
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .product-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .product-card .card-body {
      padding: 1.5rem;
      text-align: center;
    }

    .product-title {
      font-size: 1.25rem;
      margin-bottom: 0.5rem;
    }

    .product-description {
      font-size: 0.9rem;
      color: #666;
      margin-bottom: 0.75rem;
    }

    .product-price {
      font-size: 1.1rem;
      font-weight: bold;
      color: #dc3545;
    }

    /* Quick View overlay */
    .quick-view-overlay {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 0.5rem 1rem;
      opacity: 0;
      transition: opacity 0.3s ease;
      text-decoration: none;
      font-size: 0.9rem;
    }

    .product-card-container:hover .quick-view-overlay {
      opacity: 1;
    }

    /* Responsive adjustments */
    @media (max-width: 992px) {
      #product-list {
        grid-template-columns: repeat(2, 1fr); /* 2 columns on medium screens */
        gap: 1.5rem;
      }
    }

    @media (max-width: 576px) {
      #product-list {
        grid-template-columns: 1fr; /* 1 column on small screens */
        gap: 1rem;
      }

      .product-title {
        font-size: 1.1rem;
      }

      .product-description {
        font-size: 0.85rem;
      }

      .product-price {
        font-size: 1rem;
      }
    }

    /* Adjust Latest and Best Selling sections */
    .latest-best-selling .card-img-top {
      width: 100%;
      height: 200px;
      object-fit: contain; /* Ensure the entire image is visible */
    }

    @media (max-width: 768px) {
      .latest-best-selling .card-img-top {
        height: 150px;
      }
    }
  </style>
</head>
<body style="padding-top: 70px;">
  <nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm fixed-top">
    <div class="container">
      <a class="navbar-brand" href="/">
        <img src="https://primemartdeals.com/wp-content/uploads/2024/08/Logo-13.png" alt="Prime Mart Logo" style="height: 60px;">
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav mx-auto">
          <li class="nav-item">
            <a class="nav-link active" href="/">HOME</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/about">ABOUT US</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/shop">SHOP</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/contact">CONTACT</a>
          </li>
        </ul>
        <ul class="navbar-nav ms-auto">
          <% if (session.user) { %>
            <li class="nav-item">
              <div class="search-container">
                <i class="bi bi-search search-icon"></i>
                <input type="text" class="search-bar" placeholder="Search products...">
                <button class="clear-search" title="Clear search">×</button>
              </div>
            </li>
            <li class="nav-item">
              <a class="nav-link cart-trigger" href="#" id="cart-trigger">
                <span>CART</span>
                <span class="cart-badge" id="cart-item-count">0</span>
                <span>| Birr</span><span id="cart-total-nav">0.00</span>
                <span class="cart-icon">🛒</span>
              </a>
            </li>
          
            <% if (session.user.role === 'admin') { %>
              <li class="nav-item">
                <a class="nav-link" href="/admin-dashboard">Admin</a>
              </li>
            <% } %>
            <li class="nav-item">
              <a class="nav-link btn btn-outline-danger" href="/logout">LOGOUT</a>
            </li>
          <% } else { %>
            <li class="nav-item">
              <div class="search-container">
                <i class="bi bi-search search-icon"></i>
                <input type="text" class="search-bar" placeholder="Search products...">
                <button class="clear-search" title="Clear search">×</button>
              </div>
            </li>
            <li class="nav-item">
              <a class="nav-link cart-trigger" href="#" id="cart-trigger">
                <span>CART</span>
                <span class="cart-badge" id="cart-item-count">0</span>
                <span>| Birr</span><span id="cart-total-nav">0.00</span>
                <span class="cart-icon">🛒</span>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link btn btn-outline-primary" href="" data-bs-toggle="modal" data-bs-target="#authModal" data-form="login">LOGIN</a>
            </li>
          <% } %>
        </ul>
      </div>
    </div>
  </nav>

  <div id="cd-shadow-layer"></div>
  <div id="cart-sidebar">
    <div class="cart-sidebar-header">
      <h2>Your Cart</h2>
      <button class="close-cart-sidebar">×</button>
    </div>
    <div id="cart-sidebar-items"></div>
    <div class="cart-sidebar-footer">
      <p>Total: Birr<span id="cart-sidebar-total">0.00</span></p>
      <a href="/cart" class="btn btn-primary w-100">view cart</a>
    </div>
  </div>

  <div class="modal fade" id="authModal" tabindex="-1" aria-labelledby="authModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content">
        <div class="modal-body">
          <div class="row gx-4">
            <div class="col-md-6 login-section">
              <h3 class="mb-4">LOGIN</h3>
              <form id="loginForm" action="/login" method="POST">
                <div class="mb-3">
                  <label for="loginUsername" class="form-label">Username or email address <span class="text-danger">*</span></label>
                  <input type="text" class="form-control" id="loginUsername" name="email" required>
                </div>
                <div class="mb-3">
                  <label for="loginPassword" class="form-label">Password <span class="text-danger">*</span></label>
                  <input type="password" class="form-control" id="loginPassword" name="password" required>
                </div>
                <div class="mb-3 form-check">
                  <input type="checkbox" class="form-check-input" id="rememberMe" name="rememberMe">
                  <label class="form-check-label" for="rememberMe">Remember me</label>
                </div>
                <button type="submit" class="btn btn-primary w-100">LOG IN</button>
                <p class="mt-3"><a href="#" class="text-muted">Lost your password?</a></p>
                <p class="error-message" id="loginError"></p>
              </form>
            </div>
            <div class="col-md-6 register-section">
              <h3 class="mb-4">REGISTER</h3>
              <form id="registerForm" action="/register" method="POST">
                <div class="mb-3">
                  <label for="registerUsername" class="form-label">Username <span class="text-danger">*</span></label>
                  <input type="text" class="form-control" id="registerUsername" name="username" required>
                </div>
                <div class="mb-3">
                  <label for="registerEmail" class="form-label">Email address <span class="text-danger">*</span></label>
                  <input type="email" class="form-control" id="registerEmail" name="email" required>
                </div>
                <div class="mb-3">
                  <label for="registerPassword" class="form-label">Password <span class="text-danger">*</span></label>
                  <input type="password" class="form-control" id="registerPassword" name="password" required>
                </div>
                <button type="submit" class="btn btn-primary w-100">REGISTER</button>
                <p class="error-message" id="registerError"></p>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Quick View Modal -->
  <div class="modal fade" id="quickViewModal" tabindex="-1" aria-labelledby="quickViewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="quickViewModalLabel">Product Details</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="row">
            <div class="col-md-6">
              <div class="image-container">
                <div class="image-label">FRONT</div>
                <img id="quickViewImage" src="" alt="Product Front Image" class="img-fluid">
              </div>
              <div class="image-container">
                <div class="image-label">BACK</div>
                <img id="quickViewImageBack" src="" alt="Product Back Image" class="img-fluid">
              </div>
            </div>
            <div class="col-md-6">
              <h5 id="quickViewTitle"></h5>
              <div>
                <span id="quickViewOriginalPrice"></span>
                <span id="quickViewPrice" class="text-danger fw-bold"></span>
              </div>
              <div id="quickViewDetails">
                <p><strong>Fit:</strong> <span id="quickViewFit"></span></p>
                <p><strong>Bottom:</strong> <span id="quickViewBottom"></span></p>
                <p><strong>Material:</strong> <span id="quickViewMaterial"></span></p>
                <p><strong>Hem/Cuff:</strong> <span id="quickViewHemCuff"></span></p>
                <p><strong>Colour:</strong> <span id="quickViewColour"></span></p>
              </div>
              <div id="quickViewSizes">
                <strong>Size:</strong>
                <label><input type="radio" name="quickViewSize" value="M (38 inches)" checked> M (38 inches)</label>
                <label><input type="radio" name="quickViewSize" value="L (40 inches)"> L (40 inches)</label>
                <label><input type="radio" name="quickViewSize" value="XL (42 inches)"> XL (42 inches)</label>
                <label><input type="radio" name="quickViewSize" value="XXL (44 inches)"> XXL (44 inches)</label>
              </div>
              <div id="quickViewQuantity">
                <strong>Quantity:</strong> 1
              </div>
              <button id="quickViewAddToCart">ADD TO CART</button>
              <div id="quickViewSku">
                <strong>SKU:</strong> N/A
              </div>
              <div id="quickViewCategory">
                <strong>Category:</strong> <span id="quickViewCategoryText"></span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <section class="hero-section text-center py-5">
    <div class="hero-background">
      <img src="https://images.unsplash.com/photo-1515886657613-9f3515b0c78f" alt="Model 1" class="hero-model model-1">
      <img src="https://images.unsplash.com/photo-1529139574466-a303027c1d8b?w=400&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NHx8ZmFzaGlvbnxlbnwwfHwwfHx8MA%3D%3D" alt="Model 4" class="hero-model model-4"> 
    </div>
    <div class="container">
      <div class="banner-container">
        <h3 class="display-4 text-white">It has Finally started…</h3>
        <h2 class="display-5 fw-bold text-white">HUGE SALE UP TO 70% OFF</h2>
      </div>
      <p class="lead mb-4 text-white">Top Brand Clothing's</p>
      <a href="/shop" class="btn btn-primary btn-lg shop-now-btn">SHOP NOW</a>
    </div>
    <div class="snowflakes" id="snowflakes-container"></div>
  </section>

  <section class="featured-products py-5">
    <div class="container">
      <h2 class="text-center mb-5">FEATURED PRODUCTS</h2>
      <div id="product-list"></div>
      <div class="loading">Loading products...</div>
    </div>
  </section>

  <section class="latest-best-selling py-5">
    <div class="container">
      <div class="narrow-container">
        <div class="row">
          <div class="col-md-6 latest-section">
            <h2 class="mb-4">LATEST</h2>
            <div id="latest-product-list">
              <div class="loading">Loading latest products...</div>
            </div>
          </div>
          <div class="col-md-6">
            <h2 class="mb-4">BEST SELLING</h2>
            <div id="best-selling-product-list">
              <div class="loading">Loading best-selling products...</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <footer class="bg-purple text-white py-4">
    <div class="container">
      <div class="row">
        <div class="col-md-4">
          <h5>ABOUT US</h5>
          <p>
            Welcome to Prime Mart, the ultimate destination for premium BRANDED clothing. We specialize in offering a curated selection of high-quality, stylish apparel from top global brands. Our collection is designed for fashion-conscious individuals.
          </p>
        </div>
        <div class="col-md-4">
          <h5>QUICK LINKS</h5>
          <ul class="list-unstyled">
            <li><a href="/about" class="text-white">About us</a></li>
            <li><a href="/privacy" class="text-white">Privacy Policy</a></li>
            <li><a href="/terms" class="text-white">Terms and Conditions</a></li>
          </ul>
        </div>
        <div class="col-md-4">
          <h5>REACH US AT</h5>
          <p>PRIME MART DEALS</p>
          <p><a href="mailto:support@classicstore.co" class="text-white">support@classicstore.co</a></p>
        </div>
      </div>
      <div class="text-center mt-3">
        <p>© 2025 Prime Mart. All rights reserved.</p>
      </div>
    </div>
  </footer>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="/scripts.js"></script>
  <script>
    const API_BASE_URL = 'http://localhost:3800/api';
    const isDebug = true; // Set to false in production
    let allProducts = []; // Store all products for search filtering

    document.addEventListener('DOMContentLoaded', () => {
      const banner = document.querySelector('.banner-container');
      setTimeout(() => {
        banner.classList.add('extended');
      }, 500);
      cleanCartData();
      updateCartTotal();
      updateCartSidebar();
      startSnowfall();
      fetchAndDisplayProducts();
      setupLoginForm();
      setupSearchBar();
    });

    function setupSearchBar() {
      const searchIcon = document.querySelector('.search-icon');
      const searchBar = document.querySelector('.search-bar');
      const clearSearchBtn = document.querySelector('.clear-search');

      // Toggle search bar visibility on icon click
      searchIcon.addEventListener('click', () => {
        searchBar.classList.toggle('active');
        if (searchBar.classList.contains('active')) {
          searchBar.focus();
        } else {
          searchBar.value = '';
          clearSearchBtn.classList.remove('active');
          displayProducts(allProducts); // Reset product display
        }
      });

      // Show/hide clear button based on input
      searchBar.addEventListener('input', () => {
        if (searchBar.value.length > 0) {
          clearSearchBtn.classList.add('active');
        } else {
          clearSearchBtn.classList.remove('active');
          displayProducts(allProducts); // Reset product display
        }
      });

      // Clear search on button click
      clearSearchBtn.addEventListener('click', () => {
        searchBar.value = '';
        clearSearchBtn.classList.remove('active');
        searchBar.focus();
        displayProducts(allProducts); // Reset product display
      });

      // Filter products on search input
      searchBar.addEventListener('keyup', (e) => {
        const query = searchBar.value.trim().toLowerCase();
        if (e.key === 'Enter' || query.length >= 2 || query === '') {
          const filteredProducts = allProducts.filter(product => 
            product.title.toLowerCase().includes(query) ||
            product.description.toLowerCase().includes(query) ||
            (product.category && product.category.toLowerCase().includes(query))
          );
          displayProducts(filteredProducts);
        }
      });
    }

    function setupLoginForm() {
      const loginForm = document.getElementById('loginForm');
      const loginError = document.getElementById('loginError');

      loginForm.addEventListener('submit', async (e) => {
        e.preventDefault(); // Prevent default form submission

        const formData = new FormData(loginForm);
        const data = {
          email: formData.get('email'),
          password: formData.get('password'),
          rememberMe: formData.get('rememberMe') === 'on'
        };

        try {
          console.log('Sending login request:', data); // Debug: Log request data
          const response = await fetch('/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
            credentials: 'include' // Ensure session cookies are sent/received
          });

          console.log('Response status:', response.status); // Debug: Log response status
          const result = await response.json();
          console.log('Response data:', result); // Debug: Log response data

          if (response.ok) {
            // Close modal to avoid interference
            const modal = bootstrap.Modal.getInstance(document.getElementById('authModal'));
            if (modal) {
              modal.hide();
            }

            // Redirect to homepage
            window.location.assign('http://localhost:3800/');
          } else {
            // Display server-provided error
            loginError.textContent = result.error || 'Login failed. Please try again.';
            loginError.style.display = 'block';
          }
        } catch (error) {
          console.error('Login error:', error); // Debug: Log error details
          loginError.textContent = 'An error occurred. Please try again later.';
          loginError.style.display = 'block';
        }
      });
    }

    const cartTrigger = document.getElementById('cart-trigger');
    const cartSidebar = document.getElementById('cart-sidebar');
    const shadowLayer = document.getElementById('cd-shadow-layer');
    const closeCartBtn = document.querySelector('.close-cart-sidebar');

    cartTrigger.addEventListener('click', (e) => {
      e.preventDefault();
      cleanCartData();
      cartSidebar.classList.add('active');
      shadowLayer.classList.add('active');
      updateCartTotal();
      updateCartSidebar();
    });

    closeCartBtn.addEventListener('click', () => {
      cartSidebar.classList.remove('active');
      shadowLayer.classList.remove('active');
    });

    shadowLayer.addEventListener('click', () => {
      cartSidebar.classList.remove('active');
      shadowLayer.classList.remove('active');
    });

    function startSnowfall() {
      const snowflakesContainer = document.getElementById('snowflakes-container');
      const createSnowflake = () => {
        const snowflake = document.createElement('div');
        snowflake.className = 'snowflake';
        snowflake.innerHTML = '❄';
        
        const startX = Math.random() * 100;
        const duration = Math.random() * 5 + 5;
        const delay = Math.random() * 5;

        snowflake.style.left = `${startX}vw`;
        snowflake.style.animation = `fall ${duration}s linear ${delay}s`;

        snowflakesContainer.appendChild(snowflake);

        snowflake.addEventListener('animationend', () => {
          snowflake.remove();
        });
      };

      setInterval(createSnowflake, 200);
    }

    // Function to retry loading an image
    function loadImageWithRetry(imgElement, src, productName, retries = 3, delay = 1000) {
      let attempts = 0;
      function tryLoad() {
        imgElement.src = src;
        imgElement.onerror = () => {
          attempts++;
          if (attempts < retries) {
            setTimeout(tryLoad, delay);
          } else {
            imgElement.src = 'https://images.unsplash.com/photo-1556906781-9a412961c28c';
            if (isDebug) console.error(`Failed to load image for ${productName} after ${retries} attempts: ${src}`);
          }
        };
        if (isDebug) {
          imgElement.onload = () => console.log(`Successfully loaded image for ${productName}: ${src}`);
        }
      }
      tryLoad();
    }

    // Function to create a product card for all sections
    function createProductCard(product, isFeatured = false) {
      const discount = product.discount || 0;
      const price = parseFloat(product.price) || 0;
      const originalPrice = price;
      const discountedPrice = discount > 0 ? price * (1 - discount / 100) : price;

      // Quick View button attributes
      const quickViewData = `
        data-bs-toggle="modal" 
        data-bs-target="#quickViewModal" 
        data-id="${product.id}"
        data-title="${product.title}" 
        data-description="${product.description}" 
        data-original-price="${originalPrice.toFixed(2)}"
        data-price="${discountedPrice.toFixed(2)}" 
        data-image="${product.image_url}" 
        data-image-back="${product.image_url_back || product.image_url}"
        data-fit="${product.fit || 'N/A'}"
        data-bottom="${product.bottom || 'N/A'}"
        data-material="${product.material || 'N/A'}"
        data-hem-cuff="${product.hem_cuff || 'N/A'}"
        data-colour="${product.colour || 'N/A'}"
        data-category="${product.category || 'N/A'}"
      `;

      if (isFeatured) {
        // For Featured Products section (grid layout)
        return `
          <div class="mb-4">
            <div class="card product-card h-100">
              <div class="product-card-container">
                <img class="card-img-top product-image" alt="${product.title}">
                <a href="#" class="quick-view-overlay" ${quickViewData}>QUICK VIEW</a>
              </div>
              <div class="card-body text-center">
                <h5 class="product-title">${product.title}</h5>
                <p class="product-description">${product.description}</p>
                <p class="product-price">Birr${discountedPrice.toFixed(2)}</p>
              </div>
            </div>
          </div>
        `;
      } else {
        // For Latest and Best Selling sections (list layout with discount badge)
        return `
          <div class="col-12 mb-4">
            <div class="card product-card">
              <div class="product-card-container">
                <img class="card-img-top" alt="${product.title}">
                <a href="#" class="quick-view-overlay" ${quickViewData}>QUICK VIEW</a>
                ${discount > 0 ? `<div class="discount-badge">${discount}% OFF</div>` : ''}
              </div>
              <div class="card-body">
                <h5 class="card-title">${product.title}</h5>
                <div class="star-rating mb-2">
                  <i class="bi bi-star-fill"></i>
                  <i class="bi bi-star-fill"></i>
                  <i class="bi bi-star-fill"></i>
                  <i class="bi bi-star-fill"></i>
                  <i class="bi bi-star-fill"></i>
                </div>
                <p class="card-text">
                  <span class="text-danger fw-bold">Birr${discountedPrice.toFixed(2)}</span>
                </p>
              </div>
            </div>
          </div>
        `;
      }
    }

    // Display Products for all sections
    function displayProducts(products) {
      const productListContainer = document.getElementById('product-list');
      const latestProductListContainer = document.getElementById('latest-product-list');
      const bestSellingProductListContainer = document.getElementById('best-selling-product-list');

      productListContainer.innerHTML = '';
      latestProductListContainer.innerHTML = '';
      bestSellingProductListContainer.innerHTML = '';

      if (products.length === 0) {
        productListContainer.innerHTML = '<div class="col-12 text-center">No products found.</div>';
        latestProductListContainer.innerHTML = '<div class="col-12 text-center">No latest products found.</div>';
        bestSellingProductListContainer.innerHTML = '<div class="col-12 text-center">No best-selling products found.</div>';
        return;
      }

      // Featured Products (all filtered products)
      products.forEach(product => {
        productListContainer.innerHTML += createProductCard(product, true);
      });

      // Latest Products (first 3 filtered products)
      const latestProducts = products.slice(0, 3);
      latestProducts.forEach(product => {
        latestProductListContainer.innerHTML += createProductCard(product, false);
      });

      // Best Selling Products (next 3 filtered products)
      const bestSellingProducts = products.slice(3, 6);
      bestSellingProducts.forEach(product => {
        bestSellingProductListContainer.innerHTML += createProductCard(product, false);
      });

      // Load images with retry mechanism
      const allImages = document.querySelectorAll('.card-img-top, .product-image');
      allImages.forEach(img => {
        const src = img.getAttribute('src') || products.find(p => p.title === img.alt)?.image_url;
        if (src) {
          loadImageWithRetry(img, src, img.alt);
        }
      });

      // Attach event listeners to Quick View buttons
      document.querySelectorAll('.quick-view-overlay').forEach(button => {
        button.addEventListener('click', () => {
          const id = button.dataset.id;
          const title = button.dataset.title;
          const originalPrice = button.dataset.originalPrice;
          const price = button.dataset.price;
          const image = button.dataset.image;
          const imageBack = button.dataset.imageBack;
          const fit = button.dataset.fit;
          const bottom = button.dataset.bottom;
          const material = button.dataset.material;
          const hemCuff = button.dataset.hemCuff;
          const colour = button.dataset.colour;
          const category = button.dataset.category;

          document.getElementById('quickViewTitle').textContent = title;
          document.getElementById('quickViewOriginalPrice').textContent = `Birr${originalPrice}`;
          document.getElementById('quickViewPrice').textContent = `Birr${price}`;
          document.getElementById('quickViewImage').src = image;
          document.getElementById('quickViewImageBack').src = imageBack;
          document.getElementById('quickViewFit').textContent = fit;
          document.getElementById('quickViewBottom').textContent = bottom;
          document.getElementById('quickViewMaterial').textContent = material;
          document.getElementById('quickViewHemCuff').textContent = hemCuff;
          document.getElementById('quickViewColour').textContent = colour;
          document.getElementById('quickViewCategoryText').textContent = category;

          // Load Quick View images with retry
          loadImageWithRetry(document.getElementById('quickViewImage'), image, `${title} (Front)`);
          loadImageWithRetry(document.getElementById('quickViewImageBack'), imageBack, `${title} (Back)`);

          // Set data-id on Add to Cart button
          document.getElementById('quickViewAddToCart').dataset.id = id;
          document.getElementById('quickViewAddToCart').dataset.price = price;
          document.getElementById('quickViewAddToCart').dataset.image = image;
          document.getElementById('quickViewAddToCart').dataset.title = title;
        });
      });
    }

    // Fetch and Display Products for all sections
    async function fetchAndDisplayProducts(retries = 3, delay = 1000) {
      const productListContainer = document.getElementById('product-list');
      const latestProductListContainer = document.getElementById('latest-product-list');
      const bestSellingProductListContainer = document.getElementById('best-selling-product-list');

      for (let attempt = 1; attempt <= retries; attempt++) {
        try {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 5000); // 5-second timeout
          const response = await fetch(`${API_BASE_URL}/products`, { signal: controller.signal });
          clearTimeout(timeoutId);

          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}, StatusText: ${response.statusText}`);
          }

          const products = await response.json();
          if (!Array.isArray(products)) {
            throw new Error('Invalid response format: Expected an array of products');
          }

          if (isDebug) {
            products.forEach(product => {
              console.log(`Product: ${product.title}, Price: ${product.price}, Type: ${typeof product.price}`);
            });
          }

          allProducts = products; // Store products for search filtering
          displayProducts(products); // Initial display
          return; // Success, exit retry loop
        } catch (error) {
          console.error(`Attempt ${attempt} failed to fetch products:`, {
            message: error.message,
            name: error.name,
            stack: error.stack,
            attempt,
            url: `${API_BASE_URL}/products`
          });

          if (attempt === retries) {
            console.error('All attempts to fetch products failed.');
            productListContainer.innerHTML = `<div class="error-message">Failed to load products: ${error.message || 'Unknown error'}</div>`;
            latestProductListContainer.innerHTML = `<div class="error-message">Failed to load latest products: ${error.message || 'Unknown error'}</div>`;
            bestSellingProductListContainer.innerHTML = `<div class="error-message">Failed to load best-selling products: ${error.message || 'Unknown error'}</div>`;
          } else {
            await new Promise(resolve => setTimeout(resolve, delay));
          }
        }
      }
    }

    // Add to Cart from Quick View Modal
    document.getElementById('quickViewAddToCart').addEventListener('click', () => {
      const button = document.getElementById('quickViewAddToCart');
      const id = parseInt(button.dataset.id);
      const title = button.dataset.title;
      const price = parseFloat(button.dataset.price);
      const image = button.dataset.image;
      const size = document.querySelector('input[name="quickViewSize"]:checked').value;
      const quantity = 1;

      let cart = JSON.parse(localStorage.getItem('cart')) || [];
      const existingItem = cart.find(item => item.id === id && item.size === size);

      if (existingItem) {
        existingItem.quantity = (parseInt(existingItem.quantity) || 1) + quantity;
      } else {
        cart.push({
          id,
          name: title,
          price,
          quantity,
          images: [image],
          size
        });
      }

      localStorage.setItem('cart', JSON.stringify(cart));
      updateCartTotal();
      updateCartSidebar();

      // Close the modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('quickViewModal'));
      modal.hide();
    });

    function cleanCartData() {
      let cart = JSON.parse(localStorage.getItem('cart')) || [];
      cart = cart.filter(item => {
        return item.id && Number(item.price) > 0 && Number(item.quantity) > 0 && item.name && item.images && item.size;
      });
      localStorage.setItem('cart', JSON.stringify(cart));
      return cart;
    }

    function removeCartItem(id, size) {
      let cart = JSON.parse(localStorage.getItem('cart')) || [];
      cart = cart.filter(item => !(item.id === id && item.size === size));
      localStorage.setItem('cart', JSON.stringify(cart));
      updateCartTotal();
      updateCartSidebar();
    }

    function updateCartTotal() {
      const cart = JSON.parse(localStorage.getItem('cart')) || [];
      const total = cart.reduce((sum, item) => {
        const price = Number(item.price) || 0;
        const quantity = Number(item.quantity) || 1;
        return sum + price * quantity;
      }, 0);
      const itemCount = cart.reduce((sum, item) => {
        const quantity = Number(item.quantity) || 1;
        return sum + quantity;
      }, 0);
      document.getElementById('cart-total-nav').textContent = isNaN(total) ? '0.00' : total.toFixed(2);
      document.getElementById('cart-item-count').textContent = itemCount;
    }

    function updateCartSidebar() {
      const cart = cleanCartData();
      const cartItemsContainer = document.getElementById('cart-sidebar-items');
      const cartTotalElement = document.getElementById('cart-sidebar-total');
      cartItemsContainer.innerHTML = '';

      if (!cart || cart.length === 0) {
        cartItemsContainer.innerHTML = '<p class="text-center">Your cart is empty.</p>';
        cartTotalElement.textContent = '0.00';
        cartItemsContainer.classList.remove('scrollable');
        return;
      }

      cart.forEach(item => {
        const price = Number(item.price) || 0;
        const quantity = Number(item.quantity) || 1;
        const image = Array.isArray(item.images) && item.images.length > 0 ? item.images[0] : 'https://images.unsplash.com/photo-1556906781-9a412961c28c';
        const cartItem = `
          <div class="cart-item">
            <button class="remove-cart-item" data-id="${item.id}" data-size="${item.size}">❌</button>
            <img alt="${item.name || 'Product'}" class="cart-item-img">
            <div class="cart-item-details">
              <h6>${item.name || 'Unknown Product'}</h6>
              <p>Size: ${item.size || 'N/A'}</p>
              <p class="text-danger">Birr${price.toFixed(2)} x ${quantity}</p>
            </div>
          </div>
        `;
        cartItemsContainer.innerHTML += cartItem;

        const imgElement = cartItemsContainer.lastElementChild.querySelector('.cart-item-img');
        loadImageWithRetry(imgElement, image, item.name);
        if (isDebug) imgElement.onload = () => console.log(`Successfully loaded cart image for ${item.name}: ${image}`);
      });

      document.querySelectorAll('.remove-cart-item').forEach(button => {
        button.addEventListener('click', () => {
          const id = parseInt(button.dataset.id);
          const size = button.dataset.size;
          removeCartItem(id, size);
        });
      });

      const total = cart.reduce((sum, item) => {
        const price = Number(item.price) || 0;
        const quantity = Number(item.quantity) || 1;
        return sum + price * quantity;
      }, 0);
      cartTotalElement.textContent = total.toFixed(2);

      if (cartItemsContainer.scrollHeight > cartItemsContainer.clientHeight) {
        cartItemsContainer.classList.add('scrollable');
      } else {
        cartItemsContainer.classList.remove('scrollable');
      }
    }
  </script>
</body>
</html>